@echo off
REM Script untuk Testing Sinoman App di BlueStacks dengan Logging (v2 - Fixed)
REM Author: Generated by Claude Code
REM Date: 2025-10-05

setlocal enabledelayedexpansion

echo ============================================
echo Sinoman App - BlueStacks Testing Script v2
echo ============================================
echo.

REM Set variables
set APP_PACKAGE=id.sinomanapp.mobile
set BLUESTACKS_PORT=5555
set TIMESTAMP=%date:~-4%%date:~3,2%%date:~0,2%-%time:~0,2%%time:~3,2%%time:~6,2%
set TIMESTAMP=%TIMESTAMP: =0%
set LOG_DIR=test-logs\%TIMESTAMP%

REM Create log directory
if not exist test-logs mkdir test-logs
if not exist %LOG_DIR% mkdir %LOG_DIR%

echo [1/9] Fixing ADB Connection...
echo Killing old ADB processes...
taskkill /F /IM adb.exe >nul 2>&1
timeout /t 1 /nobreak >nul

echo Restarting ADB server...
adb kill-server
timeout /t 1 /nobreak >nul
adb start-server
timeout /t 2 /nobreak >nul

echo Disconnecting old connections...
adb disconnect localhost:%BLUESTACKS_PORT% >nul 2>&1
adb disconnect localhost:5565 >nul 2>&1
timeout /t 1 /nobreak >nul

echo Trying to connect to BlueStacks...
adb connect localhost:%BLUESTACKS_PORT%
timeout /t 3 /nobreak >nul

echo.
echo Checking device status...
adb devices -l

REM Verify device is online
adb devices | findstr "device$" >nul
if errorlevel 1 (
    echo.
    echo ERROR: BlueStacks is OFFLINE!
    echo.
    echo Trying alternative port 5565...
    set BLUESTACKS_PORT=5565
    adb connect localhost:5565
    timeout /t 2 /nobreak >nul

    adb devices | findstr "device$" >nul
    if errorlevel 1 (
        echo.
        echo STILL OFFLINE! Please check:
        echo.
        echo 1. BlueStacks is RUNNING
        echo 2. Go to BlueStacks Settings ^> Advanced
        echo 3. Enable "Android Debug Bridge"
        echo 4. Check the ADB port number shown
        echo 5. Run: fix-adb-connection.bat
        echo.
        pause
        exit /b 1
    )
)
echo OK - BlueStacks is ONLINE on port %BLUESTACKS_PORT%
echo.

echo [2/9] Checking for APK file...
if not exist sinoman-mobile-app.apk (
    echo ERROR: APK file not found!
    echo Please download APK from:
    echo https://expo.dev/accounts/arielampar/projects/sinoman-mobile-app/builds/2d245cc8-b9d4-4720-b97a-1ff4d66f242c
    echo.
    echo Save it as: sinoman-mobile-app.apk
    pause
    exit /b 1
)
echo OK - APK file found
echo.

echo [3/9] Uninstalling old version (if exists)...
adb uninstall %APP_PACKAGE% >nul 2>&1
timeout /t 1 /nobreak >nul
echo OK - Old version removed
echo.

echo [4/9] Installing fresh APK...
adb install -r -g sinoman-mobile-app.apk > %LOG_DIR%\install.log 2>&1
if errorlevel 1 (
    echo ERROR: Installation FAILED!
    echo.
    type %LOG_DIR%\install.log
    echo.
    pause
    exit /b 1
) else (
    echo OK - APK installed successfully
)
echo.

echo [5/9] Verifying installation...
adb shell pm list packages | findstr %APP_PACKAGE% >nul
if errorlevel 1 (
    echo ERROR: App not found after installation!
    pause
    exit /b 1
)
echo OK - App is installed
echo.

echo [6/9] Clearing old logs...
adb logcat -c
echo OK - Logs cleared
echo.

echo [7/9] Starting logcat in background...
start /b cmd /c "adb logcat -v threadtime > %LOG_DIR%\full-logcat.log 2>&1"
timeout /t 2 /nobreak >nul
start /b cmd /c "adb logcat ReactNativeJS:V ReactNative:V *:S > %LOG_DIR%\react-native.log 2>&1"
timeout /t 2 /nobreak >nul
start /b cmd /c "adb logcat *:E > %LOG_DIR%\errors-only.log 2>&1"
timeout /t 2 /nobreak >nul
echo OK - 3 logcat processes started
echo.

echo [8/9] Launching Sinoman App...
adb shell am start -n %APP_PACKAGE%/.MainActivity > %LOG_DIR%\launch.log 2>&1
if errorlevel 1 (
    echo ERROR: Failed to launch app
    type %LOG_DIR%\launch.log
    pause
    exit /b 1
)
echo OK - App launched
echo.
echo App is now running. Monitoring for 30 seconds...
echo Watch your BlueStacks window to see the app!
echo.

echo [9/9] Monitoring app (30 seconds)...
for /L %%i in (30,-1,1) do (
    <nul set /p "=Time remaining: %%i seconds    "
    timeout /t 1 /nobreak >nul
    echo.
)

echo.
echo Collecting diagnostic data...

REM Take screenshot
echo - Taking screenshot...
adb shell screencap /sdcard/screenshot-%TIMESTAMP%.png >nul 2>&1
adb pull /sdcard/screenshot-%TIMESTAMP%.png %LOG_DIR%\ >nul 2>&1

REM Get memory stats
echo - Getting memory stats...
adb shell dumpsys meminfo %APP_PACKAGE% > %LOG_DIR%\memory-stats.txt 2>&1

REM Get app info
echo - Getting app info...
adb shell dumpsys package %APP_PACKAGE% > %LOG_DIR%\app-full-info.txt 2>&1
adb shell dumpsys package %APP_PACKAGE% | findstr "versionCode versionName" > %LOG_DIR%\app-version.txt 2>&1

REM Check for crashes
echo - Checking for crashes...
adb logcat -d -s AndroidRuntime:E > %LOG_DIR%\crashes.log 2>&1

echo OK - All data collected
echo.

REM Stop logging
echo Stopping logcat processes...
taskkill /F /FI "WINDOWTITLE eq adb logcat*" >nul 2>&1
timeout /t 2 /nobreak >nul
echo OK - Logging stopped
echo.

echo ============================================
echo Testing Complete!
echo ============================================
echo.
echo Log files saved to: %LOG_DIR%
echo.
echo Files created:
dir /b %LOG_DIR%
echo.

REM Quick analysis
echo Quick Analysis:
echo ===============
echo.

REM Count errors
for /f %%a in ('findstr /i "error" %LOG_DIR%\full-logcat.log ^| find /c /v ""') do set ERROR_COUNT=%%a
echo Errors found: %ERROR_COUNT%

REM Count crashes
for /f %%a in ('findstr /i "crash exception fatal" %LOG_DIR%\crashes.log ^| find /c /v ""') do set CRASH_COUNT=%%a
echo Crashes found: %CRASH_COUNT%

echo.
echo Manual Analysis Commands:
echo =========================
echo View all errors:
echo   findstr /i "error" %LOG_DIR%\full-logcat.log
echo.
echo View crashes:
echo   type %LOG_DIR%\crashes.log
echo.
echo View React Native logs:
echo   type %LOG_DIR%\react-native.log
echo.
echo View memory usage:
echo   type %LOG_DIR%\memory-stats.txt
echo.

echo Opening log directory...
start explorer %LOG_DIR%

pause
